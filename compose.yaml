services:
  # Backend API service (production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-movieapi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-movieapi}
      - TMDB_API_KEY=${TMDB_API_KEY}
      - CACHE_ENABLED=true
      - LOG_LEVEL=info
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-at-least-32-chars}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API service (debug mode with Delve)
  backend-debug:
    build:
      context: ./backend
      dockerfile: Dockerfile.debug
    ports:
      - "8080:8080"  # Application port
      - "2345:2345"  # Delve debugger port
      - "6060:6060"  # pprof port
    environment:
      - ENV=development
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-movieapi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-movieapi}
      - TMDB_API_KEY=${TMDB_API_KEY}
      - CACHE_ENABLED=true
      - LOG_LEVEL=debug
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-at-least-32-chars}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - debug
    volumes:
      - ./backend:/app  # Mount source code for live debugging
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
    cap_add:
      - SYS_PTRACE

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:8080/api/v1
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-movieapi}
      - POSTGRES_USER=${POSTGRES_USER:-movieapi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-movieapi} -d ${POSTGRES_DB:-movieapi}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "8081:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  default:
    name: movieapi_network